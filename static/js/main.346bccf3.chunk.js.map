{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCNjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHtBO,G,MAAS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAClC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCPG,E,kDAxCd,WAAYhB,GAAQ,IAAD,8BAClB,gBAcDa,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IALI,E,qDASnB,WAAqB,IAAD,OACnBI,MAAM,6CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WAAU,IAAD,EAC0BC,KAAKN,MAA/Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC3B,GAAD,OACxCA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEjD,OACC,sBAAK9B,UAAU,MAAf,UACC,kDAEA,cAAC,EAAD,CACCW,YAAY,iBACZC,aAAce,KAAKf,eAIpB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCNI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.346bccf3.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import './card-list.css';\r\nimport { Card } from '../card/card-component';\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((monster) => (\r\n                <Card key={monster.id} monster={monster}/>\r\n\t\t\t))}\r\n    </div>);\r\n}","import React from 'react';\r\nimport \"./search.styles.css\";\r\n\r\nexport const Search = ({ placeholder, handleChange }) => {\r\n    return (\r\n        <input\r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />\r\n    )\r\n}","import \"./App.css\";\r\nimport { Component } from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { Search } from \"./components/search/search.component\";\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\tmonsters: [],\r\n\t\t\tsearchField: \"\",\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"http://jsonplaceholder.typicode.com/users\")\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((users) => this.setState({ monsters: users }));\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({ searchField: e.target.value });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { monsters, searchField } = this.state;\r\n\t\tconst filteredMonsters = monsters.filter((monster) =>\r\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<h1>Monsters Rolodex</h1>\r\n\t\t\t\t{/* search component */}\r\n\t\t\t\t<Search\r\n\t\t\t\t\tplaceholder=\"Search Monster\"\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t{/* Cardist Component */}\r\n\t\t\t\t<CardList monsters={filteredMonsters} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}